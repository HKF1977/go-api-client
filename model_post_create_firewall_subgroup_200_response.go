/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 5.1.5
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PostCreateFirewallSubgroup200Response - struct for PostCreateFirewallSubgroup200Response
type PostCreateFirewallSubgroup200Response struct {
	CommandOutputResponse *CommandOutputResponse
	FirewallSubgroupStatusListResponse *FirewallSubgroupStatusListResponse
}

// CommandOutputResponseAsPostCreateFirewallSubgroup200Response is a convenience function that returns CommandOutputResponse wrapped in PostCreateFirewallSubgroup200Response
func CommandOutputResponseAsPostCreateFirewallSubgroup200Response(v *CommandOutputResponse) PostCreateFirewallSubgroup200Response {
	return PostCreateFirewallSubgroup200Response{
		CommandOutputResponse: v,
	}
}

// FirewallSubgroupStatusListResponseAsPostCreateFirewallSubgroup200Response is a convenience function that returns FirewallSubgroupStatusListResponse wrapped in PostCreateFirewallSubgroup200Response
func FirewallSubgroupStatusListResponseAsPostCreateFirewallSubgroup200Response(v *FirewallSubgroupStatusListResponse) PostCreateFirewallSubgroup200Response {
	return PostCreateFirewallSubgroup200Response{
		FirewallSubgroupStatusListResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PostCreateFirewallSubgroup200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CommandOutputResponse
	err = newStrictDecoder(data).Decode(&dst.CommandOutputResponse)
	if err == nil {
		jsonCommandOutputResponse, _ := json.Marshal(dst.CommandOutputResponse)
		if string(jsonCommandOutputResponse) == "{}" { // empty struct
			dst.CommandOutputResponse = nil
		} else {
			match++
		}
	} else {
		dst.CommandOutputResponse = nil
	}

	// try to unmarshal data into FirewallSubgroupStatusListResponse
	err = newStrictDecoder(data).Decode(&dst.FirewallSubgroupStatusListResponse)
	if err == nil {
		jsonFirewallSubgroupStatusListResponse, _ := json.Marshal(dst.FirewallSubgroupStatusListResponse)
		if string(jsonFirewallSubgroupStatusListResponse) == "{}" { // empty struct
			dst.FirewallSubgroupStatusListResponse = nil
		} else {
			match++
		}
	} else {
		dst.FirewallSubgroupStatusListResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CommandOutputResponse = nil
		dst.FirewallSubgroupStatusListResponse = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(PostCreateFirewallSubgroup200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(PostCreateFirewallSubgroup200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PostCreateFirewallSubgroup200Response) MarshalJSON() ([]byte, error) {
	if src.CommandOutputResponse != nil {
		return json.Marshal(&src.CommandOutputResponse)
	}

	if src.FirewallSubgroupStatusListResponse != nil {
		return json.Marshal(&src.FirewallSubgroupStatusListResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PostCreateFirewallSubgroup200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CommandOutputResponse != nil {
		return obj.CommandOutputResponse
	}

	if obj.FirewallSubgroupStatusListResponse != nil {
		return obj.FirewallSubgroupStatusListResponse
	}

	// all schemas are nil
	return nil
}

type NullablePostCreateFirewallSubgroup200Response struct {
	value *PostCreateFirewallSubgroup200Response
	isSet bool
}

func (v NullablePostCreateFirewallSubgroup200Response) Get() *PostCreateFirewallSubgroup200Response {
	return v.value
}

func (v *NullablePostCreateFirewallSubgroup200Response) Set(val *PostCreateFirewallSubgroup200Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePostCreateFirewallSubgroup200Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePostCreateFirewallSubgroup200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostCreateFirewallSubgroup200Response(val *PostCreateFirewallSubgroup200Response) *NullablePostCreateFirewallSubgroup200Response {
	return &NullablePostCreateFirewallSubgroup200Response{value: val, isSet: true}
}

func (v NullablePostCreateFirewallSubgroup200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostCreateFirewallSubgroup200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


