/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 5.1.5
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PutLdapSettingsRequest struct for PutLdapSettingsRequest
type PutLdapSettingsRequest struct {
	// IP address or resolvable hostname of LDAP server
	Host string `json:"host"`
	// Port for LDAP
	Port *int32 `json:"port,omitempty"`
	// Use SSL
	Encrypt *bool `json:"encrypt,omitempty"`
	// Use LDAPS or start TLS (default)?
	EncryptLdaps *bool `json:"encrypt_ldaps,omitempty"`
	// Use certificates to authenticate via encrypted connection
	EncryptAuth *bool `json:"encrypt_auth,omitempty"`
	// Verify certicate using authority
	EncryptVerifyCa *bool `json:"encrypt_verify_ca,omitempty"`
	// Bind Username
	Binddn *string `json:"binddn,omitempty"`
	// Bind Password
	Bindpw *string `json:"bindpw,omitempty"`
}

// NewPutLdapSettingsRequest instantiates a new PutLdapSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutLdapSettingsRequest(host string) *PutLdapSettingsRequest {
	this := PutLdapSettingsRequest{}
	this.Host = host
	var port int32 = 389
	this.Port = &port
	var encrypt bool = false
	this.Encrypt = &encrypt
	var encryptLdaps bool = true
	this.EncryptLdaps = &encryptLdaps
	var encryptAuth bool = false
	this.EncryptAuth = &encryptAuth
	var encryptVerifyCa bool = false
	this.EncryptVerifyCa = &encryptVerifyCa
	return &this
}

// NewPutLdapSettingsRequestWithDefaults instantiates a new PutLdapSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutLdapSettingsRequestWithDefaults() *PutLdapSettingsRequest {
	this := PutLdapSettingsRequest{}
	var port int32 = 389
	this.Port = &port
	var encrypt bool = false
	this.Encrypt = &encrypt
	var encryptLdaps bool = true
	this.EncryptLdaps = &encryptLdaps
	var encryptAuth bool = false
	this.EncryptAuth = &encryptAuth
	var encryptVerifyCa bool = false
	this.EncryptVerifyCa = &encryptVerifyCa
	return &this
}

// GetHost returns the Host field value
func (o *PutLdapSettingsRequest) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *PutLdapSettingsRequest) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *PutLdapSettingsRequest) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *PutLdapSettingsRequest) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutLdapSettingsRequest) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *PutLdapSettingsRequest) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *PutLdapSettingsRequest) SetPort(v int32) {
	o.Port = &v
}

// GetEncrypt returns the Encrypt field value if set, zero value otherwise.
func (o *PutLdapSettingsRequest) GetEncrypt() bool {
	if o == nil || o.Encrypt == nil {
		var ret bool
		return ret
	}
	return *o.Encrypt
}

// GetEncryptOk returns a tuple with the Encrypt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutLdapSettingsRequest) GetEncryptOk() (*bool, bool) {
	if o == nil || o.Encrypt == nil {
		return nil, false
	}
	return o.Encrypt, true
}

// HasEncrypt returns a boolean if a field has been set.
func (o *PutLdapSettingsRequest) HasEncrypt() bool {
	if o != nil && o.Encrypt != nil {
		return true
	}

	return false
}

// SetEncrypt gets a reference to the given bool and assigns it to the Encrypt field.
func (o *PutLdapSettingsRequest) SetEncrypt(v bool) {
	o.Encrypt = &v
}

// GetEncryptLdaps returns the EncryptLdaps field value if set, zero value otherwise.
func (o *PutLdapSettingsRequest) GetEncryptLdaps() bool {
	if o == nil || o.EncryptLdaps == nil {
		var ret bool
		return ret
	}
	return *o.EncryptLdaps
}

// GetEncryptLdapsOk returns a tuple with the EncryptLdaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutLdapSettingsRequest) GetEncryptLdapsOk() (*bool, bool) {
	if o == nil || o.EncryptLdaps == nil {
		return nil, false
	}
	return o.EncryptLdaps, true
}

// HasEncryptLdaps returns a boolean if a field has been set.
func (o *PutLdapSettingsRequest) HasEncryptLdaps() bool {
	if o != nil && o.EncryptLdaps != nil {
		return true
	}

	return false
}

// SetEncryptLdaps gets a reference to the given bool and assigns it to the EncryptLdaps field.
func (o *PutLdapSettingsRequest) SetEncryptLdaps(v bool) {
	o.EncryptLdaps = &v
}

// GetEncryptAuth returns the EncryptAuth field value if set, zero value otherwise.
func (o *PutLdapSettingsRequest) GetEncryptAuth() bool {
	if o == nil || o.EncryptAuth == nil {
		var ret bool
		return ret
	}
	return *o.EncryptAuth
}

// GetEncryptAuthOk returns a tuple with the EncryptAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutLdapSettingsRequest) GetEncryptAuthOk() (*bool, bool) {
	if o == nil || o.EncryptAuth == nil {
		return nil, false
	}
	return o.EncryptAuth, true
}

// HasEncryptAuth returns a boolean if a field has been set.
func (o *PutLdapSettingsRequest) HasEncryptAuth() bool {
	if o != nil && o.EncryptAuth != nil {
		return true
	}

	return false
}

// SetEncryptAuth gets a reference to the given bool and assigns it to the EncryptAuth field.
func (o *PutLdapSettingsRequest) SetEncryptAuth(v bool) {
	o.EncryptAuth = &v
}

// GetEncryptVerifyCa returns the EncryptVerifyCa field value if set, zero value otherwise.
func (o *PutLdapSettingsRequest) GetEncryptVerifyCa() bool {
	if o == nil || o.EncryptVerifyCa == nil {
		var ret bool
		return ret
	}
	return *o.EncryptVerifyCa
}

// GetEncryptVerifyCaOk returns a tuple with the EncryptVerifyCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutLdapSettingsRequest) GetEncryptVerifyCaOk() (*bool, bool) {
	if o == nil || o.EncryptVerifyCa == nil {
		return nil, false
	}
	return o.EncryptVerifyCa, true
}

// HasEncryptVerifyCa returns a boolean if a field has been set.
func (o *PutLdapSettingsRequest) HasEncryptVerifyCa() bool {
	if o != nil && o.EncryptVerifyCa != nil {
		return true
	}

	return false
}

// SetEncryptVerifyCa gets a reference to the given bool and assigns it to the EncryptVerifyCa field.
func (o *PutLdapSettingsRequest) SetEncryptVerifyCa(v bool) {
	o.EncryptVerifyCa = &v
}

// GetBinddn returns the Binddn field value if set, zero value otherwise.
func (o *PutLdapSettingsRequest) GetBinddn() string {
	if o == nil || o.Binddn == nil {
		var ret string
		return ret
	}
	return *o.Binddn
}

// GetBinddnOk returns a tuple with the Binddn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutLdapSettingsRequest) GetBinddnOk() (*string, bool) {
	if o == nil || o.Binddn == nil {
		return nil, false
	}
	return o.Binddn, true
}

// HasBinddn returns a boolean if a field has been set.
func (o *PutLdapSettingsRequest) HasBinddn() bool {
	if o != nil && o.Binddn != nil {
		return true
	}

	return false
}

// SetBinddn gets a reference to the given string and assigns it to the Binddn field.
func (o *PutLdapSettingsRequest) SetBinddn(v string) {
	o.Binddn = &v
}

// GetBindpw returns the Bindpw field value if set, zero value otherwise.
func (o *PutLdapSettingsRequest) GetBindpw() string {
	if o == nil || o.Bindpw == nil {
		var ret string
		return ret
	}
	return *o.Bindpw
}

// GetBindpwOk returns a tuple with the Bindpw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutLdapSettingsRequest) GetBindpwOk() (*string, bool) {
	if o == nil || o.Bindpw == nil {
		return nil, false
	}
	return o.Bindpw, true
}

// HasBindpw returns a boolean if a field has been set.
func (o *PutLdapSettingsRequest) HasBindpw() bool {
	if o != nil && o.Bindpw != nil {
		return true
	}

	return false
}

// SetBindpw gets a reference to the given string and assigns it to the Bindpw field.
func (o *PutLdapSettingsRequest) SetBindpw(v string) {
	o.Bindpw = &v
}

func (o PutLdapSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["host"] = o.Host
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Encrypt != nil {
		toSerialize["encrypt"] = o.Encrypt
	}
	if o.EncryptLdaps != nil {
		toSerialize["encrypt_ldaps"] = o.EncryptLdaps
	}
	if o.EncryptAuth != nil {
		toSerialize["encrypt_auth"] = o.EncryptAuth
	}
	if o.EncryptVerifyCa != nil {
		toSerialize["encrypt_verify_ca"] = o.EncryptVerifyCa
	}
	if o.Binddn != nil {
		toSerialize["binddn"] = o.Binddn
	}
	if o.Bindpw != nil {
		toSerialize["bindpw"] = o.Bindpw
	}
	return json.Marshal(toSerialize)
}

type NullablePutLdapSettingsRequest struct {
	value *PutLdapSettingsRequest
	isSet bool
}

func (v NullablePutLdapSettingsRequest) Get() *PutLdapSettingsRequest {
	return v.value
}

func (v *NullablePutLdapSettingsRequest) Set(val *PutLdapSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutLdapSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutLdapSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutLdapSettingsRequest(val *PutLdapSettingsRequest) *NullablePutLdapSettingsRequest {
	return &NullablePutLdapSettingsRequest{value: val, isSet: true}
}

func (v NullablePutLdapSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutLdapSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


