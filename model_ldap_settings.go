/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 5.1.5
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LdapSettings struct for LdapSettings
type LdapSettings struct {
	// IP address or resolvable hostname
	Host *string `json:"host,omitempty"`
	Port *int32 `json:"port,omitempty"`
	// Use SSL
	Encrypt *bool `json:"encrypt,omitempty"`
	// Use LDAPS or start TLS (default)?
	EncryptLdaps *bool `json:"encrypt_ldaps,omitempty"`
	// Use certificates to authenticate via encrypted connection
	EncryptAuth *bool `json:"encrypt_auth,omitempty"`
	EncryptAuthKey *bool `json:"encrypt_auth_key,omitempty"`
	EncryptAuthCert *bool `json:"encrypt_auth_cert,omitempty"`
	// Verify certicate using authority
	EncryptVerifyCa *bool `json:"encrypt_verify_ca,omitempty"`
	EncryptCaCert *bool `json:"encrypt_ca_cert,omitempty"`
	// Bind username
	Binddn *string `json:"binddn,omitempty"`
}

// NewLdapSettings instantiates a new LdapSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdapSettings() *LdapSettings {
	this := LdapSettings{}
	return &this
}

// NewLdapSettingsWithDefaults instantiates a new LdapSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdapSettingsWithDefaults() *LdapSettings {
	this := LdapSettings{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *LdapSettings) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapSettings) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *LdapSettings) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *LdapSettings) SetHost(v string) {
	o.Host = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *LdapSettings) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapSettings) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *LdapSettings) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *LdapSettings) SetPort(v int32) {
	o.Port = &v
}

// GetEncrypt returns the Encrypt field value if set, zero value otherwise.
func (o *LdapSettings) GetEncrypt() bool {
	if o == nil || o.Encrypt == nil {
		var ret bool
		return ret
	}
	return *o.Encrypt
}

// GetEncryptOk returns a tuple with the Encrypt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapSettings) GetEncryptOk() (*bool, bool) {
	if o == nil || o.Encrypt == nil {
		return nil, false
	}
	return o.Encrypt, true
}

// HasEncrypt returns a boolean if a field has been set.
func (o *LdapSettings) HasEncrypt() bool {
	if o != nil && o.Encrypt != nil {
		return true
	}

	return false
}

// SetEncrypt gets a reference to the given bool and assigns it to the Encrypt field.
func (o *LdapSettings) SetEncrypt(v bool) {
	o.Encrypt = &v
}

// GetEncryptLdaps returns the EncryptLdaps field value if set, zero value otherwise.
func (o *LdapSettings) GetEncryptLdaps() bool {
	if o == nil || o.EncryptLdaps == nil {
		var ret bool
		return ret
	}
	return *o.EncryptLdaps
}

// GetEncryptLdapsOk returns a tuple with the EncryptLdaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapSettings) GetEncryptLdapsOk() (*bool, bool) {
	if o == nil || o.EncryptLdaps == nil {
		return nil, false
	}
	return o.EncryptLdaps, true
}

// HasEncryptLdaps returns a boolean if a field has been set.
func (o *LdapSettings) HasEncryptLdaps() bool {
	if o != nil && o.EncryptLdaps != nil {
		return true
	}

	return false
}

// SetEncryptLdaps gets a reference to the given bool and assigns it to the EncryptLdaps field.
func (o *LdapSettings) SetEncryptLdaps(v bool) {
	o.EncryptLdaps = &v
}

// GetEncryptAuth returns the EncryptAuth field value if set, zero value otherwise.
func (o *LdapSettings) GetEncryptAuth() bool {
	if o == nil || o.EncryptAuth == nil {
		var ret bool
		return ret
	}
	return *o.EncryptAuth
}

// GetEncryptAuthOk returns a tuple with the EncryptAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapSettings) GetEncryptAuthOk() (*bool, bool) {
	if o == nil || o.EncryptAuth == nil {
		return nil, false
	}
	return o.EncryptAuth, true
}

// HasEncryptAuth returns a boolean if a field has been set.
func (o *LdapSettings) HasEncryptAuth() bool {
	if o != nil && o.EncryptAuth != nil {
		return true
	}

	return false
}

// SetEncryptAuth gets a reference to the given bool and assigns it to the EncryptAuth field.
func (o *LdapSettings) SetEncryptAuth(v bool) {
	o.EncryptAuth = &v
}

// GetEncryptAuthKey returns the EncryptAuthKey field value if set, zero value otherwise.
func (o *LdapSettings) GetEncryptAuthKey() bool {
	if o == nil || o.EncryptAuthKey == nil {
		var ret bool
		return ret
	}
	return *o.EncryptAuthKey
}

// GetEncryptAuthKeyOk returns a tuple with the EncryptAuthKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapSettings) GetEncryptAuthKeyOk() (*bool, bool) {
	if o == nil || o.EncryptAuthKey == nil {
		return nil, false
	}
	return o.EncryptAuthKey, true
}

// HasEncryptAuthKey returns a boolean if a field has been set.
func (o *LdapSettings) HasEncryptAuthKey() bool {
	if o != nil && o.EncryptAuthKey != nil {
		return true
	}

	return false
}

// SetEncryptAuthKey gets a reference to the given bool and assigns it to the EncryptAuthKey field.
func (o *LdapSettings) SetEncryptAuthKey(v bool) {
	o.EncryptAuthKey = &v
}

// GetEncryptAuthCert returns the EncryptAuthCert field value if set, zero value otherwise.
func (o *LdapSettings) GetEncryptAuthCert() bool {
	if o == nil || o.EncryptAuthCert == nil {
		var ret bool
		return ret
	}
	return *o.EncryptAuthCert
}

// GetEncryptAuthCertOk returns a tuple with the EncryptAuthCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapSettings) GetEncryptAuthCertOk() (*bool, bool) {
	if o == nil || o.EncryptAuthCert == nil {
		return nil, false
	}
	return o.EncryptAuthCert, true
}

// HasEncryptAuthCert returns a boolean if a field has been set.
func (o *LdapSettings) HasEncryptAuthCert() bool {
	if o != nil && o.EncryptAuthCert != nil {
		return true
	}

	return false
}

// SetEncryptAuthCert gets a reference to the given bool and assigns it to the EncryptAuthCert field.
func (o *LdapSettings) SetEncryptAuthCert(v bool) {
	o.EncryptAuthCert = &v
}

// GetEncryptVerifyCa returns the EncryptVerifyCa field value if set, zero value otherwise.
func (o *LdapSettings) GetEncryptVerifyCa() bool {
	if o == nil || o.EncryptVerifyCa == nil {
		var ret bool
		return ret
	}
	return *o.EncryptVerifyCa
}

// GetEncryptVerifyCaOk returns a tuple with the EncryptVerifyCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapSettings) GetEncryptVerifyCaOk() (*bool, bool) {
	if o == nil || o.EncryptVerifyCa == nil {
		return nil, false
	}
	return o.EncryptVerifyCa, true
}

// HasEncryptVerifyCa returns a boolean if a field has been set.
func (o *LdapSettings) HasEncryptVerifyCa() bool {
	if o != nil && o.EncryptVerifyCa != nil {
		return true
	}

	return false
}

// SetEncryptVerifyCa gets a reference to the given bool and assigns it to the EncryptVerifyCa field.
func (o *LdapSettings) SetEncryptVerifyCa(v bool) {
	o.EncryptVerifyCa = &v
}

// GetEncryptCaCert returns the EncryptCaCert field value if set, zero value otherwise.
func (o *LdapSettings) GetEncryptCaCert() bool {
	if o == nil || o.EncryptCaCert == nil {
		var ret bool
		return ret
	}
	return *o.EncryptCaCert
}

// GetEncryptCaCertOk returns a tuple with the EncryptCaCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapSettings) GetEncryptCaCertOk() (*bool, bool) {
	if o == nil || o.EncryptCaCert == nil {
		return nil, false
	}
	return o.EncryptCaCert, true
}

// HasEncryptCaCert returns a boolean if a field has been set.
func (o *LdapSettings) HasEncryptCaCert() bool {
	if o != nil && o.EncryptCaCert != nil {
		return true
	}

	return false
}

// SetEncryptCaCert gets a reference to the given bool and assigns it to the EncryptCaCert field.
func (o *LdapSettings) SetEncryptCaCert(v bool) {
	o.EncryptCaCert = &v
}

// GetBinddn returns the Binddn field value if set, zero value otherwise.
func (o *LdapSettings) GetBinddn() string {
	if o == nil || o.Binddn == nil {
		var ret string
		return ret
	}
	return *o.Binddn
}

// GetBinddnOk returns a tuple with the Binddn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapSettings) GetBinddnOk() (*string, bool) {
	if o == nil || o.Binddn == nil {
		return nil, false
	}
	return o.Binddn, true
}

// HasBinddn returns a boolean if a field has been set.
func (o *LdapSettings) HasBinddn() bool {
	if o != nil && o.Binddn != nil {
		return true
	}

	return false
}

// SetBinddn gets a reference to the given string and assigns it to the Binddn field.
func (o *LdapSettings) SetBinddn(v string) {
	o.Binddn = &v
}

func (o LdapSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Encrypt != nil {
		toSerialize["encrypt"] = o.Encrypt
	}
	if o.EncryptLdaps != nil {
		toSerialize["encrypt_ldaps"] = o.EncryptLdaps
	}
	if o.EncryptAuth != nil {
		toSerialize["encrypt_auth"] = o.EncryptAuth
	}
	if o.EncryptAuthKey != nil {
		toSerialize["encrypt_auth_key"] = o.EncryptAuthKey
	}
	if o.EncryptAuthCert != nil {
		toSerialize["encrypt_auth_cert"] = o.EncryptAuthCert
	}
	if o.EncryptVerifyCa != nil {
		toSerialize["encrypt_verify_ca"] = o.EncryptVerifyCa
	}
	if o.EncryptCaCert != nil {
		toSerialize["encrypt_ca_cert"] = o.EncryptCaCert
	}
	if o.Binddn != nil {
		toSerialize["binddn"] = o.Binddn
	}
	return json.Marshal(toSerialize)
}

type NullableLdapSettings struct {
	value *LdapSettings
	isSet bool
}

func (v NullableLdapSettings) Get() *LdapSettings {
	return v.value
}

func (v *NullableLdapSettings) Set(val *LdapSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableLdapSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableLdapSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdapSettings(val *LdapSettings) *NullableLdapSettings {
	return &NullableLdapSettings{value: val, isSet: true}
}

func (v NullableLdapSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdapSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


