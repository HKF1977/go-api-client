/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 5.1.5
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SimpleEnabledResponseResponse struct for SimpleEnabledResponseResponse
type SimpleEnabledResponseResponse struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// NewSimpleEnabledResponseResponse instantiates a new SimpleEnabledResponseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleEnabledResponseResponse() *SimpleEnabledResponseResponse {
	this := SimpleEnabledResponseResponse{}
	return &this
}

// NewSimpleEnabledResponseResponseWithDefaults instantiates a new SimpleEnabledResponseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleEnabledResponseResponseWithDefaults() *SimpleEnabledResponseResponse {
	this := SimpleEnabledResponseResponse{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SimpleEnabledResponseResponse) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleEnabledResponseResponse) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SimpleEnabledResponseResponse) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SimpleEnabledResponseResponse) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o SimpleEnabledResponseResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableSimpleEnabledResponseResponse struct {
	value *SimpleEnabledResponseResponse
	isSet bool
}

func (v NullableSimpleEnabledResponseResponse) Get() *SimpleEnabledResponseResponse {
	return v.value
}

func (v *NullableSimpleEnabledResponseResponse) Set(val *SimpleEnabledResponseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleEnabledResponseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleEnabledResponseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleEnabledResponseResponse(val *SimpleEnabledResponseResponse) *NullableSimpleEnabledResponseResponse {
	return &NullableSimpleEnabledResponseResponse{value: val, isSet: true}
}

func (v NullableSimpleEnabledResponseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleEnabledResponseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


